import pathlib
from collections import deque
from typing import cast

import celery
from autodict import Options
from autoserde import AutoSerde

from cmdproxy.celery_app.config import init_client_end_conf, \
    init_server_end_conf
from cmdproxy.client import Client
from cmdproxy.invoke_params import FileParamBase, FormatParam, StrParam
from cmdproxy.run_request import RunRequest
from cmdproxy.server import Server
from tests.conftest import uri_of_mongo, uri_of_redis
from tests.fake_run_context import create_fake_client_run_content, \
    create_fake_server_run_content


def test_client(redis, mongo, celery_app, celery_worker, faker,
                fake_local_path_maker, fake_local_file_maker):
    conf = init_client_end_conf(redis_uri=uri_of_redis(redis),
                                mongo_uri=uri_of_mongo(mongo),
                                mongodb_name='test-cmdproxy-client')
    ctx = create_fake_client_run_content(faker, fake_local_path_maker,
                                         fake_local_file_maker)

    @celery_app.task
    def mock_server_end(serialized_request: str):
        run_request = AutoSerde.deserialize(body=serialized_request,
                                            cls=RunRequest, fmt='json')
        stack = deque(zip(
            [*ctx.spec.args, ctx.spec.stdout, ctx.spec.stderr,
             *ctx.spec.env.values()],
            [*run_request.args, run_request.stdout, run_request.stderr,
             *run_request.env.values()]))

        # assert all the params has been transformed into expected style
        while stack:
            origin_arg, arg = stack.popleft()

            # also check all sub-params of FormatParam
            if isinstance(origin_arg, FormatParam):
                assert isinstance(arg, FormatParam)
                stack.extend(zip(origin_arg.args, arg.args))

            # assert all strings has become as StrParam
            if isinstance(origin_arg, str):
                assert arg == StrParam(origin_arg)

            # assert all file param has become CloudFileParm
            if isinstance(origin_arg, FileParamBase):
                assert arg == origin_arg.as_cloud()

        return ctx.ret_code

    celery_worker.reload()

    client = Client.instantiate(conf, cast(celery.Task, mock_server_end))
    ret = client.run(
        command=ctx.spec.command,
        args=ctx.spec.args,
        stdout=ctx.spec.stdout,
        stderr=ctx.spec.stderr,
        env=ctx.spec.env,
        cwd=ctx.spec.cwd
    )

    assert ctx.ret_code == ret


def test_server(redis, mongo, faker, fake_cloud_file_maker,
                fake_local_path_maker):
    conf = init_server_end_conf(redis_uri=uri_of_redis(redis),
                                mongo_uri=uri_of_mongo(mongo),
                                mongodb_name='test-cmdproxy-server',
                                command_palette_path=pathlib.Path(
                                    'command-palette.yaml'))
    fs = conf.celery.grid_fs()
    ctx = create_fake_server_run_content(faker, fake_local_path_maker,
                                         fake_cloud_file_maker, fs)
    run_request = RunRequest(
        command=ctx.spec.command,
        args=ctx.spec.args,
        stdout=ctx.spec.stdout,
        stderr=ctx.spec.stderr,
        env=ctx.spec.env,
        cwd=ctx.spec.cwd,
    )
    serialized = AutoSerde.serialize(run_request, fmt='json',
                                     options=Options(with_cls=False))

    server = Server.instantiate(conf)
    ret = server.run(serialized)

    assert ctx.ret_code == ret

    # assert all outputs are uploaded
    for output_content, out_param in ctx.outputs.values():
        uploaded_content = out_param.download(fs)[1]
        assert output_content == uploaded_content

    # assert all local inputs downloaded by server have been swept
    for input_path in ctx.local_input_files:
        assert not input_path.exists()

    # assert all local outputs generated by process have been swept
    for output_path in ctx.local_output_files:
        assert not output_path.exists()
